package nl.tijsbeek.torchcraftexcelmod.Event;import net.minecraft.client.Minecraft;import net.minecraft.util.text.StringTextComponent;import net.minecraftforge.client.event.ClientChatEvent;import net.minecraftforge.eventbus.api.Event;import net.minecraftforge.eventbus.api.SubscribeEvent;import net.minecraftforge.fml.common.Mod;import nl.tijsbeek.torchcraftexcelmod.Excel.Excel;import nl.tijsbeek.torchcraftexcelmod.torchcraftexcelmod;import java.io.IOException;import static nl.tijsbeek.torchcraftexcelmod.Event.ClientChatReceived.getMessage;import static nl.tijsbeek.torchcraftexcelmod.Excel.Excel.importExcel;import static nl.tijsbeek.torchcraftexcelmod.Mod.Stock.*;import static nl.tijsbeek.torchcraftexcelmod.Settings.Settings.*;@Mod.EventBusSubscriber(modid = torchcraftexcelmod.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)public class ChatEvent extends Event {    @SubscribeEvent    public static void chatEvent(ClientChatEvent event) throws IOException {        switch (event.getMessage().toLowerCase()) {            case "?help":                event.setCanceled(true);                Minecraft.getInstance().player.sendMessage(new StringTextComponent("\n" +                        "?Start to start the calculations \n" +                        "?Stop to stop the calculations\n" +                        "?Clear to clear the saved items\n" +                        "?Test for debugging purposes when the mod is not working\n" +                        "?InventoryWorth print what your inventory is worth atm\n" +                        "?ExportExcel Export the values to a excel file.\n" +                        "?ImportExcel Import the values of the prices.\n" +                        "?Prices to see the prices to check or the import worked.\n" +                        "?ImportSettings to import the settings while still in game." +                        "?IncludeBal to include, or exclude the bal with the calculations."));                break;            case "?start":                event.setCanceled(true);                startCalculationsInt = 1;                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Calculations have started"));                break;            case "?stop":                event.setCanceled(true);                startCalculationsInt = 0;                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Calculations have stopped"));                clearInventory();                break;            case "?clear":                event.setCanceled(true);                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Stock.java is being cleared"));                clearInventory();                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Stock.java is cleared!"));                break;            case "?test":                event.setCanceled(true);                Minecraft.getInstance().player.sendMessage(new StringTextComponent(                        "ticksToUpdate." + ticksUntilUpdate + "\n" +                                "autoPricesImport." + autoPricesImport + "\n" +                                "showCobblestoneAsStone." + showCobblestoneAsStone + "\n" +                                "showCoalAsCoalBlocks." + showCoalAsCoalBlocks + "\n" +                                "showCoalOreAsCoal." + showCoalOreAsCoal + "\n" +                                "showLapisOreAsOre." + showLapisOreAsLapis + ""));                itemOrderedKeys.forEach(value -> Minecraft.getInstance().player.sendMessage(new StringTextComponent("In inventory: " + itemData.get(value).getItemsInInventory() + " of " + value)));                itemOrderedKeys.forEach(value -> Minecraft.getInstance().player.sendMessage(new StringTextComponent("Price " + +itemData.get(value).getItemPrice() + " of " + value)));                break;            case "?inventoryworth":                event.setCanceled(true);                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Inventoryworth: " + inventoryWorth));                break;            case "?exportexcel":                event.setCanceled(true);                Excel.excelExport();                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Exporting to Excel.."));                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Exporting done."));                break;            case "?importexcel":                event.setCanceled(true);                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Importing to Excel.."));                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Importing done."));                importExcel();                break;            case "?prices":                event.setCanceled(true);                itemOrderedKeys.forEach((value) -> Minecraft.getInstance().player.sendMessage(new StringTextComponent(value + " price: " + itemData.get(value).getItemPrice())));                break;            case "?importsettings":                event.setCanceled(true);                importSettings();                break;            case "/bal":            case "/balance":                Minecraft.getInstance().player.sendMessage( new StringTextComponent("/bal or /balance has been run"));                getMessage = true;                break;            case "?includebal":            case "?ib":                event.setCanceled(true);                includeBalInCalculations = false;                break;        }    }}