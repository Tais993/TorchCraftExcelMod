package nl.tijsbeek.torchcraftexcelmod.Event;import net.minecraft.client.Minecraft;import net.minecraft.util.text.StringTextComponent;import net.minecraftforge.client.event.ClientChatEvent;import net.minecraftforge.eventbus.api.Event;import net.minecraftforge.eventbus.api.SubscribeEvent;import net.minecraftforge.fml.common.Mod;import nl.tijsbeek.torchcraftexcelmod.Mod.Stock;import nl.tijsbeek.torchcraftexcelmod.torchcraftexcelmod;import static nl.tijsbeek.torchcraftexcelmod.Mod.Stock.*;@Mod.EventBusSubscriber(modid = torchcraftexcelmod.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)public class ChatEvent extends Event {    static Stock stock = new Stock();    @SubscribeEvent    public static void ChatEvent(ClientChatEvent event) {        switch (event.getMessage()) {            case "?Help":                event.setCanceled(true);                Minecraft.getInstance().player.sendMessage(new StringTextComponent("?Start to start the calculations \n" +                        "?Stop to stop the calculations\n" +                        "?Clear to clear the saved items\n" +                        "?Test for debugging purposes when the mod is not working\n" +                        "?InventoryWorth print what your inventory is worth atm\n" +                        "?Main to start the main\n"));            case "?Start":                event.setCanceled(true);                stock.main();                startCalculationsInt = 1;                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Calculations have started"));                break;            case "?Stop":                event.setCanceled(true);                startCalculationsInt = 0;                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Calculations have stopped"));                Minecraft.getInstance().player.sendMessage(new StringTextComponent("I guess, it's 2?"));                break;            case "?Clear":                event.setCanceled(true);                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Stock.java is being cleared"));                clearInventory();                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Stock.java is cleared!"));                break;            case "?Test":                event.setCanceled(true);                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Should return 0: " + itemAmountInventory.get("STONE") + " Should return 1.1: " + itemPriceDataBase.get("STONE")));                break;            case "?InventoryWorth":                event.setCanceled(true);                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Inventoryworth: " + getInventoryWorth()));                break;            case "?Main":                event.setCanceled(true);                assignValues = 0;                stock.main();                break;            case "?ExportExcel":                event.setCanceled(true);                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Exporting to Excel.."));                Minecraft.getInstance().player.sendMessage(new StringTextComponent("Exporting done."));        }    }}